"use strict";(self.webpackChunkhyve_lang=self.webpackChunkhyve_lang||[]).push([[3939],{9325:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>o,contentTitle:()=>a,default:()=>u,frontMatter:()=>c,metadata:()=>i,toc:()=>d});var r=t(4848),s=t(8453);const c={sidebar_position:8,description:"Contracts in hyve"},a="Contracts",i={id:"guide/contracts",title:"Contracts",description:"Contracts in hyve",source:"@site/docs/guide/contracts.md",sourceDirName:"guide",slug:"/guide/contracts",permalink:"/docs/next/guide/contracts",draft:!1,unlisted:!1,editUrl:"https://github.com/broken-bytes/Hyve-docs/docs/guide/contracts.md",tags:[],version:"current",sidebarPosition:8,frontMatter:{sidebar_position:8,description:"Contracts in hyve"},sidebar:"tutorialSidebar",previous:{title:"Structures",permalink:"/docs/next/guide/structs"},next:{title:"Standard Library",permalink:"/docs/next/category/standard-library"}},o={},d=[];function l(n){const e={code:"code",h1:"h1",p:"p",pre:"pre",...(0,s.R)(),...n.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(e.h1,{id:"contracts",children:"Contracts"}),"\n",(0,r.jsx)(e.p,{children:"Contracts are something that a struct must adhere to. They are like like contracts in the real world. One party defines the contract and the other one agrees to the terms."}),"\n",(0,r.jsx)(e.p,{children:"This is exactly how contracts work in Hyve. A struct has to fulfill a contract if it wants to use it."}),"\n",(0,r.jsx)(e.p,{children:"This is how a contract is defined:"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-hyve",children:"contract Buyable {\n    mut fn buy()\n}\n"})}),"\n",(0,r.jsx)(e.p,{children:'The code can be read as "define a contract that ensures all signing parties need to implement a mutating buy function".'}),"\n",(0,r.jsx)(e.p,{children:"Accordingly, a struct may use a contract like this:"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-hyve",children:"struct Ticket: Buyable {\n    var isSold = false\n\n    mut fn buy() {\n        isSold = true\n    }\n}\n"})}),"\n",(0,r.jsx)(e.p,{children:"Contracts may also require the struct to implement some properties:"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-hyve",children:"contract Countable {\n    var count: Int\n}\n\nstruct Counter: Countable {\n    var count: Int = 0\n}\n"})}),"\n",(0,r.jsx)(e.p,{children:"Additionally, contracts can force to specifiy a generic:"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-hyve",children:"contract Container<T> {\n    var items: [T]\n\n    mut fn append(item: T) {\n        // Add to the items\n    }\n}\n\nstruct List: Container<Int> {\n    var items: [Int]\n\n    mut fn append(item: Int) {\n        ...\n    }\n}\n"})}),"\n",(0,r.jsx)(e.p,{children:"Generics can also have constraints:"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-hyve",children:"contract Container<T: where T is Numeric> {\n    var items: [T]\n\n    mut fn append(item: T) {\n        // Add to the items\n    }\n}\n\n// Error: User is not a numeric type\nstruct List: Container<User> {\n    var items: [User]\n\n    mut fn append(item: User) {\n        ...\n    }\n}\n"})})]})}function u(n={}){const{wrapper:e}={...(0,s.R)(),...n.components};return e?(0,r.jsx)(e,{...n,children:(0,r.jsx)(l,{...n})}):l(n)}},8453:(n,e,t)=>{t.d(e,{R:()=>a,x:()=>i});var r=t(6540);const s={},c=r.createContext(s);function a(n){const e=r.useContext(c);return r.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function i(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(s):n.components||s:a(n.components),r.createElement(c.Provider,{value:e},n.children)}}}]);