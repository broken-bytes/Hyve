module hyve.builtins

public struct _Int8 {
    var value: int8

    public init(value: Integer) {
        self.value = value
    }

    public fn add(lhs: _Int8, rhs: _Int8) -> _Int8 {
        var result = addInt8(a: lhs.value, b: rhs.value)
    }
}

public struct _Int16 {
    var value: int16

    public init(value: Integer) {
        self.value = value
    }

    public fn add(lhs: _Int16, rhs: _Int16) -> _Int16 {
        var result = addInt16(a: lhs.value, b: rhs.value)
    }
}

public struct _Int32 {
    var value: int32

    public init(value: Integer) {
        self.value = value
    }

    public fn add(lhs: _Int32, rhs: _Int32) -> _Int32 {
        var result = addInt32(a: lhs.value, b: rhs.value)
    }
}

public struct _Int64 {
    var value: int64

    public init(value: Integer) {
        self.value = value
    }

    public fn add(lhs: _Int64, rhs: _Int64) -> _Int64 {
        var result = addInt64(a: lhs.value, b: rhs.value)
    }
}

public struct _Float {
    var value: float

    public init(value: float) {
        self.value = value
    }

    public fn add(lhs: _Float, rhs: _Float) -> _Float {
        var result = addFloat(a: lhs.value, b: rhs.value)
    }
}

public struct _Double {
    var value: double

    public init(value: double) {
        self.value = value
    }

    public fn add(lhs: _Double, rhs: _Double) -> _Double {
        var result = addFloat(a: lhs.value, b: rhs.value)
    }
}

public struct _Char {
    var value: char

    public init(value: char) {
        self.value = value
    }
}